hist(miami_u10, breaks=30, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
hist(miami_u10, breaks=30, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
hist(miami_u10, breaks=30, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
v_ghyp <- stepAIC.ghyp(miami_v10, silent = TRUE)
v_log <- fitdistr(miami_v10, "logistic")
v_mu <- min(miami_v10)
rescaled_v <- miami_v10 - v_mu
rescaled_v[match(0, rescaled_v)] <- 0.00000000001
rescaled_v_weib <- fitdistr(rescaled_v, "weibull")
vparam <- rescaled_v_weib$estimate
hist(miami_v10, breaks=30, freq=FALSE, main="v")
lines(y, dweibull3(y, vparam[1], vparam[2], v_mu), col="blue")
lines(y, dlogis(y, v_log$estimate[1], v_log$estimate[2]), col="red")
lines(y, dghyp(y, object = v_ghyp$best.model), col="green")
legend(-4, 0.4, legend=c("Logistic", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
abs_u <- abs(miami_u10)
abs_v <- abs(miami_v10)
abs_u_weib <- fitdistr(abs_u, "weibull")
u_param <- abs_u_weib$estimate
hist(abs_u, breaks=30, freq=FALSE, main="2-Parameter Weibull, |u|")
lines(x, dweibull(x, u_param[1], u_param[2]), col="blue")
abs_v_weib <- fitdistr(abs_v, "weibull")
v_param <- abs_v_weib$estimate
hist(abs_v, breaks=30, freq=FALSE, main="2-Parameter Weibull, |v|")
lines(x, dweibull(x, v_param[1], v_param[2]), col="blue")
abs_u_weib <- fitdistr(abs_u, "weibull")
u_param <- abs_u_weib$estimate
hist(abs_u, breaks=30, freq=FALSE, main="2-Parameter Weibull, |u|")
lines(x, dweibull(x, u_param[1], u_param[2]), col="blue")
library(ncdf4)
library(ncdf4.helpers)
library(PCICt)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ismev)
library(sp)
library(sf)
library(maps)
library(mapdata)
library(SynchWave)
library(Thermimage)
library(ncf)
library(GCor)
library(ghyp)
library(forecast)
library(feasts)
library(fitdistrplus)
library(FAdist)
# read in the data
climate_data <- nc_open('m4rdata.nc')
lon <- ncvar_get(climate_data, "longitude")
lat <- ncvar_get(climate_data, "latitude")
time <- ncvar_get(climate_data, "time")
# time is given in hours since 01/01/1990 so we need to transform the time
# this now numbers it by date.
climate_time <- nc.get.time.series(climate_data, time.dim.name = "time")
# create a function that imports data appropriately from the file by giving appropriate lat and lon coordinates
import_climate_data <- function(var, lon_index, lat_index){
beforedata <- nc.get.var.subset.by.axes(climate_data, var, axis.indices = list(X = lon_index, Y = lat_index))
newdata <- as.vector(beforedata)[c(TRUE, FALSE)]
data <- newdata[1:882]
data
}
# create a function that returns the index in list of coords
city_coord_index <- function(latc, lonc){
lon_index <- which.min(abs(lon - lonc))
lat_index <- which.min(abs(lat - latc))
c(lon_index, lat_index)
}
# create a function that returns the index in time
time_index <- function(t){
match(t, climate_time)
}
# create a function that returns a temporal periodogram of a time series
periodogram <- function(x){
N <- length(x)
S <- (1/N)*abs(fft(x - mean(x)))^2
fftshift(S)
}
# a collection if indexes for cities
nyc_index <- city_coord_index(40.7, -74.0)
la_index <- city_coord_index(34.1, -118.2)
austin_index <- city_coord_index(30.3, -97.7)
dc_index <- city_coord_index(38.9, -77.0)
miami_index <- city_coord_index(25.8, -80.2)
tampa_index <- city_coord_index(28.0, -82.5)
tallahassee_index <- city_coord_index(30.4, -84.2)
miami_tp <- import_climate_data("tp", miami_index[1], miami_index[2])
tampa_tp <- import_climate_data("tp", tampa_index[1], tampa_index[2])
tallahassee_tp <- import_climate_data("tp", tallahassee_index[1], tallahassee_index[2])
miami_u10 <- import_climate_data("u10", miami_index[1], miami_index[2])
tampa_u10 <- import_climate_data("u10", tampa_index[1], tampa_index[2])
tallahassee_u10 <- import_climate_data("u10", tallahassee_index[1], tallahassee_index[2])
miami_v10 <- import_climate_data("v10", miami_index[1], miami_index[2])
tampa_v10 <- import_climate_data("v10", tampa_index[1], tampa_index[2])
tallahassee_v10 <- import_climate_data("v10", tallahassee_index[1], tallahassee_index[2])
x <- seq(0, 7, length.out=1000)
y <- seq(-7, 5, length.out=1000)
# u component
# ghyp distribution
u_ghyp <- stepAIC.ghyp(miami_u10, silent = TRUE)
u_norm <- fitdistr(miami_u10, "normal")
nparam <- u_norm$estimate
u_mu <- min(miami_u10)
rescaled_u <- miami_u10 - u_mu
rescaled_u[match(0, rescaled_u)] <- 0.00000000001
rescaled_u_weib <- fitdistr(rescaled_u, "weibull")
uparam <- rescaled_u_weib$estimate
nparam
uparam
u_mu
u_ghyp$best.model
v_ghyp <- stepAIC.ghyp(miami_v10, silent = TRUE)
v_log <- fitdistr(miami_v10, "logistic")
v_ghyp$best.model
v_log$estimate
v_mu <- min(miami_v10)
rescaled_v <- miami_v10 - v_mu
rescaled_v[match(0, rescaled_v)] <- 0.00000000001
rescaled_v_weib <- fitdistr(rescaled_v, "weibull")
vparam <- rescaled_v_weib$estimate
vparam
v_mu
miami_speed <- sqrt(miami_u10^2 + miami_v10^2)
miami_speed_ghyp <- stepAIC.ghyp(miami_speed, silent = TRUE)
# two parameter weibull distribution
miami_speed_weib <- fitdistr(miami_speed, "weibull")
param <- miami_speed_weib$estimate
# three parameter weibull distribution
mu <- min(miami_speed)
rescaled_speed <- miami_speed - mu
rescaled_speed[match(0, rescaled_speed)] <- 0.00000000001
rescaled_weib <- fitdistr(rescaled_speed, "weibull")
param2 <- rescaled_weib$estimate
hist(miami_speed, breaks=40, freq=FALSE, main="Wind Speed")
lines(x, dweibull(x, param[1], param[2]), col="red")
lines(x, dweibull3(x, param2[1], param2[2], mu), col="blue")
# lines(x, dghyp(x, object=miami_speed_ghyp$best.model), col="green")
legend(4, 0.4, legend=c("2-Parameter Weibull", "3-Parameter Weibull"),
col = c("red", "blue"), lty=1, cex=0.8)
abs_u <- abs(miami_u10)
abs_v <- abs(miami_v10)
abs_u_weib <- fitdistr(abs_u, "weibull")
u_param <- abs_u_weib$estimate
hist(abs_u, breaks=30, freq=FALSE, main="2-Parameter Weibull, |u|")
lines(x, dweibull(x, u_param[1], u_param[2]), col="blue")
abs_u_weib <- fitdistr(abs_u, "weibull")
u_param <- abs_u_weib$estimate
hist(abs_u, breaks=30, freq=FALSE, main="2-Parameter Weibull, |u|")
lines(x, dweibull(x, u_param[1], u_param[2]), col="blue")
abs_v_weib <- fitdistr(abs_v, "weibull")
v_param <- abs_v_weib$estimate
hist(abs_v, breaks=30, freq=FALSE, main="2-Parameter Weibull, |v|")
lines(x, dweibull(x, v_param[1], v_param[2]), col="blue")
hist(abs_u, breaks=30, freq=FALSE, main="2-Parameter Weibull, |u|")
lines(x, dweibull(x, u_param[1], u_param[2]), col="blue")
u_param
v_param
library(ncdf4)
library(ncdf4.helpers)
library(PCICt)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ismev)
library(sp)
library(sf)
library(maps)
library(mapdata)
library(SynchWave)
library(Thermimage)
library(ncf)
library(GCor)
library(ghyp)
library(forecast)
library(feasts)
library(fitdistrplus)
library(FAdist)
# read in the data
climate_data <- nc_open('m4rdata.nc')
lon <- ncvar_get(climate_data, "longitude")
lat <- ncvar_get(climate_data, "latitude")
time <- ncvar_get(climate_data, "time")
# time is given in hours since 01/01/1990 so we need to transform the time
# this now numbers it by date.
climate_time <- nc.get.time.series(climate_data, time.dim.name = "time")
# create a function that imports data appropriately from the file by giving appropriate lat and lon coordinates
import_climate_data <- function(var, lon_index, lat_index){
beforedata <- nc.get.var.subset.by.axes(climate_data, var, axis.indices = list(X = lon_index, Y = lat_index))
newdata <- as.vector(beforedata)[c(TRUE, FALSE)]
data <- newdata[1:882]
data
}
# create a function that returns the index in list of coords
city_coord_index <- function(latc, lonc){
lon_index <- which.min(abs(lon - lonc))
lat_index <- which.min(abs(lat - latc))
c(lon_index, lat_index)
}
# create a function that returns the index in time
time_index <- function(t){
match(t, climate_time)
}
# create a function that returns a temporal periodogram of a time series
periodogram <- function(x){
N <- length(x)
S <- (1/N)*abs(fft(x - mean(x)))^2
fftshift(S)
}
# a collection if indexes for cities
nyc_index <- city_coord_index(40.7, -74.0)
la_index <- city_coord_index(34.1, -118.2)
austin_index <- city_coord_index(30.3, -97.7)
dc_index <- city_coord_index(38.9, -77.0)
miami_index <- city_coord_index(25.8, -80.2)
tampa_index <- city_coord_index(28.0, -82.5)
tallahassee_index <- city_coord_index(30.4, -84.2)
miami_u10 <- import_climate_data("u10", miami_index[1], miami_index[2])
tampa_u10 <- import_climate_data("u10", tampa_index[1], tampa_index[2])
tallahassee_u10 <- import_climate_data("u10", tallahassee_index[1], tallahassee_index[2])
miami_v10 <- import_climate_data("v10", miami_index[1], miami_index[2])
tampa_v10 <- import_climate_data("v10", tampa_index[1], tampa_index[2])
tallahassee_v10 <- import_climate_data("v10", tallahassee_index[1], tallahassee_index[2])
install.packages("mclust")
install.packages("extremogram")
library(mclust)
library(extremogram)
?Mclust
library(ncdf4)
library(ncdf4.helpers)
library(PCICt)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ismev)
library(sp)
library(sf)
library(maps)
library(mapdata)
library(SynchWave)
library(Thermimage)
library(ncf)
library(GCor)
library(ghyp)
library(forecast)
library(feasts)
library(fitdistrplus)
library(FAdist)
library(mclust)
library(extremogram)
# read in the data
climate_data <- nc_open('m4rdata.nc')
lon <- ncvar_get(climate_data, "longitude")
lat <- ncvar_get(climate_data, "latitude")
time <- ncvar_get(climate_data, "time")
# time is given in hours since 01/01/1990 so we need to transform the time
# this now numbers it by date.
climate_time <- nc.get.time.series(climate_data, time.dim.name = "time")
# create a function that imports data appropriately from the file by giving appropriate lat and lon coordinates
import_climate_data <- function(var, lon_index, lat_index){
beforedata <- nc.get.var.subset.by.axes(climate_data, var, axis.indices = list(X = lon_index, Y = lat_index))
newdata <- as.vector(beforedata)[c(TRUE, FALSE)]
data <- newdata[1:882]
data
}
# create a function that returns the index in list of coords
city_coord_index <- function(latc, lonc){
lon_index <- which.min(abs(lon - lonc))
lat_index <- which.min(abs(lat - latc))
c(lon_index, lat_index)
}
# create a function that returns the index in time
time_index <- function(t){
match(t, climate_time)
}
# create a function that returns a temporal periodogram of a time series
periodogram <- function(x){
N <- length(x)
S <- (1/N)*abs(fft(x - mean(x)))^2
fftshift(S)
}
# a collection if indexes for cities
nyc_index <- city_coord_index(40.7, -74.0)
la_index <- city_coord_index(34.1, -118.2)
austin_index <- city_coord_index(30.3, -97.7)
dc_index <- city_coord_index(38.9, -77.0)
miami_index <- city_coord_index(25.8, -80.2)
tampa_index <- city_coord_index(28.0, -82.5)
tallahassee_index <- city_coord_index(30.4, -84.2)
miami_u10 <- import_climate_data("u10", miami_index[1], miami_index[2])
tampa_u10 <- import_climate_data("u10", tampa_index[1], tampa_index[2])
tallahassee_u10 <- import_climate_data("u10", tallahassee_index[1], tallahassee_index[2])
miami_v10 <- import_climate_data("v10", miami_index[1], miami_index[2])
tampa_v10 <- import_climate_data("v10", tampa_index[1], tampa_index[2])
tallahassee_v10 <- import_climate_data("v10", tallahassee_index[1], tallahassee_index[2])
x <- seq(0, 7, length.out=1000)
y <- seq(-7, 5, length.out=1000)
# u component
# ghyp distribution
u_ghyp <- stepAIC.ghyp(miami_u10, silent = TRUE)
# best model is essentially identical to gaussian, fit normal dist
u_norm <- fitdistr(miami_u10, "normal")
nparam <- u_norm$estimate
# three param weibull
u_mu <- min(miami_u10)
rescaled_u <- miami_u10 - u_mu
rescaled_u[match(0, rescaled_u)] <- 0.00000000001
rescaled_u_weib <- fitdistr(rescaled_u, "weibull")
uparam <- rescaled_u_weib$estimate
hist(miami_u10, breaks=30, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
hist(miami_u10, breaks=50, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
hist(miami_u10, breaks=100, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
# v component
# try a ghyp or a three parameter weibull distribution
v_ghyp <- stepAIC.ghyp(miami_v10, silent = TRUE)
v_log <- fitdistr(miami_v10, "logistic")
# three param weibull
v_mu <- min(miami_v10)
rescaled_v <- miami_v10 - v_mu
rescaled_v[match(0, rescaled_v)] <- 0.00000000001
rescaled_v_weib <- fitdistr(rescaled_v, "weibull")
vparam <- rescaled_v_weib$estimate
hist(miami_v10, breaks=100, freq=FALSE, main="v")
lines(y, dweibull3(y, vparam[1], vparam[2], v_mu), col="blue")
lines(y, dlogis(y, v_log$estimate[1], v_log$estimate[2]), col="red")
lines(y, dghyp(y, object = v_ghyp$best.model), col="green")
legend(-4, 0.4, legend=c("Logistic", "3-Parameter Weibull", "Generalised Hyperbolic"),
col = c("red", "blue", "green"),lty=1, cex=0.8)
setwd("~/GitHub/M4R-Modelling-Spatio-Temporal-Data")
library(ncdf4)
library(ncdf4.helpers)
library(PCICt)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ismev)
library(sp)
library(sf)
library(maps)
library(mapdata)
library(SynchWave)
library(Thermimage)
library(ncf)
library(GCor)
library(ghyp)
library(forecast)
library(feasts)
library(fitdistrplus)
library(FAdist)
library(mclust)
library(extremogram)
# read in the data
climate_data <- nc_open('m4rdata.nc')
lon <- ncvar_get(climate_data, "longitude")
lat <- ncvar_get(climate_data, "latitude")
time <- ncvar_get(climate_data, "time")
# time is given in hours since 01/01/1990 so we need to transform the time
# this now numbers it by date.
climate_time <- nc.get.time.series(climate_data, time.dim.name = "time")
# create a function that imports data appropriately from the file by giving appropriate lat and lon coordinates
import_climate_data <- function(var, lon_index, lat_index){
beforedata <- nc.get.var.subset.by.axes(climate_data, var, axis.indices = list(X = lon_index, Y = lat_index))
newdata <- as.vector(beforedata)[c(TRUE, FALSE)]
data <- newdata[1:882]
data
}
# create a function that returns the index in list of coords
city_coord_index <- function(latc, lonc){
lon_index <- which.min(abs(lon - lonc))
lat_index <- which.min(abs(lat - latc))
c(lon_index, lat_index)
}
# create a function that returns the index in time
time_index <- function(t){
match(t, climate_time)
}
# create a function that returns a temporal periodogram of a time series
periodogram <- function(x){
N <- length(x)
S <- (1/N)*abs(fft(x - mean(x)))^2
fftshift(S)
}
# a collection if indexes for cities
nyc_index <- city_coord_index(40.7, -74.0)
la_index <- city_coord_index(34.1, -118.2)
austin_index <- city_coord_index(30.3, -97.7)
dc_index <- city_coord_index(38.9, -77.0)
miami_index <- city_coord_index(25.8, -80.2)
tampa_index <- city_coord_index(28.0, -82.5)
tallahassee_index <- city_coord_index(30.4, -84.2)
?epdf
?density
density(miami_u10)
plot(density(miami_u10), type="l")
plot(density(miami_v10), type="l")
uparam <- rescaled_u_weib$estimate
hist(miami_u10, breaks=100, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
lines(y, density(miami_u10), col="black")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic", "Empirical"),
col = c("red", "blue", "green", "black"),lty=1, cex=0.8)
lines(density(miami_u10), col="black")
hist(miami_u10, breaks=100, freq=FALSE, main="u")
lines(y, dweibull3(y, uparam[1], uparam[2], u_mu), col="blue")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
lines(density(miami_u10), col="black")
legend(-1.2, 0.4, legend=c("Normal", "3-Parameter Weibull", "Generalised Hyperbolic", "Empirical"),
col = c("red", "blue", "green", "black"),lty=1, cex=0.8)
hist(miami_u10, breaks=100, freq=FALSE, main="u")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
lines(density(miami_u10), col="black")
legend(-1.2, 0.4, legend=c("Normal", "Generalised Hyperbolic", "Empirical"),
col = c("red", "green", "black"),lty=1, cex=0.8)
hist(miami_v10, breaks=100, freq=FALSE, main="v")
lines(density(miami_v10), col="black")
hist(miami_u10, breaks=100, freq=FALSE, main="u")
lines(y, dnorm(y, nparam[1], nparam[2]), col="red")
lines(y, dghyp(y, object = u_ghyp$best.model), col="green")
lines(density(miami_u10), col="blue")
legend(-1.2, 0.4, legend=c("Normal", "Generalised Hyperbolic", "Empirical"),
col = c("red", "green", "blue"),lty=1, cex=0.8)
col = c("red", "blue", "green", "black"),lty=1, cex=0.8)
Mclust(miami_v10)
# try a mixture model for v
v_mixture <- Mclust(miami_v10)
View(v_mixture)
v_mixture$parameters
?plot.densityMclust
?densityMclust
mixture_density <- densityMclust(miami_v10)
density(miami_v10)
lines(density(miami_v10))
v_mixture$parameters$variance
hist(miami_v10, breaks=100, freq=FALSE, main="v")
lines(density(miami_v10), col="black")
lines(v_mixture, col="blue")
hist(miami_v10, breaks=100, freq=FALSE, main="v")
lines(density(miami_v10), col="black")
lines(mixture_density, col="blue")
hist(miami_v10, breaks=100, freq=FALSE, main="v")
lines(density(miami_v10), col="black")
lines(y, mixture_density, col="blue")
lines(y, mixture_density, col="blue", what="density")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[1], sds[1]), col="blue")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
weights[1]
weights
v_mixture$parameters$pro
weights <- v_mixture$parameters$pro
means <- v_mixture$parameters$mean
sds <- v_mixture$parameters$variance$scale
weights
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
mixture_density <- densityMclust(miami_v10)
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
weights[1] + weights[2]
hist(miami_v10, breaks=100, freq=FALSE, main="v", ylab=c(0, 0.5))
lines(density(miami_v10), col="black")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
hist(miami_v10, breaks=100, freq=FALSE, main="v", ylab=c(0, 0.6))
lines(density(miami_v10), col="black")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
hist(miami_v10, breaks=100, freq=FALSE, main="v", ylim=c(0, 0.6))
lines(density(miami_v10), col="black")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
hist(miami_v10, breaks=100, freq=FALSE, main="v", ylim=c(0, 0.65))
lines(density(miami_v10), col="black")
lines(y, weights[1]*dnorm(y, means[1], sds[1])+weights[2]*dnorm(y, means[2], sds[2]), col="blue")
